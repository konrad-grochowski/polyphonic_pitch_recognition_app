import numpy as np


class Quantizator:
    ZERO_MIDI_LOWER_BOUND = 7.94304979095
    NOTES_IN_OCTAVE = 12

    """
    Method generating ranges of frequency spectrum
    matching specific MIDI notes frequencies
    """

    @staticmethod
    def generate_range(start_freq_lower_bound, spectrum_start, spectrum_end):
        step = 2.0 ** (1 / 12)
        lower_bound = start_freq_lower_bound
        for _ in range(spectrum_start, spectrum_end):
            higher_bound = lower_bound * step
            yield int(np.ceil(lower_bound)), int(np.floor(higher_bound))
            lower_bound = higher_bound

    """
    Method generating sums of Fast Fourier Transform in specific ranges generated by
    "generate_range" function
    """

    @classmethod
    def get_fft_ranges_sums(cls, fourier_transform, spectrum_start, spectrum_end,
                            frequency_coefficient):

        spectrum_start_lower_bound = cls.ZERO_MIDI_LOWER_BOUND * \
                                     (2.0 ** (spectrum_start / cls.NOTES_IN_OCTAVE))

        start_freq_product = spectrum_start_lower_bound * frequency_coefficient
        note_freqs = list()
        for lower_bound, higher_bound in cls.generate_range(start_freq_product,
                                                            spectrum_start, spectrum_end):
            freq_sum = np.sum(
                np.abs(fourier_transform[lower_bound:higher_bound]))
            note_freqs.append(freq_sum)
        return note_freqs
